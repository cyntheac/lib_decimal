#include "s21_decimal.h"

// checkmk tests_s21_decimal > tests_s21_decimal.c
// gcc -Wall -Werror -Wextra -pedantic -std=c11 s21_*.c tests_*.c -lcheck

// #suit s21_
// #tcase s21_
// #test test_s21_

/////////////////////////////////////////////////////////////////////////////
// s21_add
/////////////////////////////////////////////////////////////////////////////
#tcase add
#test test_add_01_zero
s21_decimal d1 = {{ 1, 0, 0, 0 }};
s21_decimal d2 = {{ 1, 0, 0, -2147483648 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_add(d1, d2, &res);
fail_unless(res.bits[0] == 0);

#test test_add_02_ezInt
s21_decimal d1 = {{ 1, 0, 0, 0 }};
s21_decimal d2 = {{ 2, 0, 0, 0 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_add(d1, d2, &res);
fail_unless(res.bits[0] == 3);

#test test_add_03_ezNegInt
s21_decimal d1 = {{ 1, 0, 0, 0 }};
s21_decimal d2 = {{ 4, 0, 0, -2147483648 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_add(d1, d2, &res);
fail_unless(res.bits[0] == 3 && res.bits[3] == -2147483648);

#test test_add_04_complex_01
s21_decimal d1 = {{ 122, 0, 0, 65536 }};
s21_decimal d2 = {{ 88, 0, 0, 1835008 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_add(d1, d2, &res);
fail_unless(res.bits[0] == -1476394999 && res.bits[1] == 928390272 && res.bits[2] == 661363325 && res.bits[3] == 1769472);

#test test_add_05_complex_02
s21_decimal d1 = {{ -1, -1, -1, -2147483648 }};
s21_decimal d2 = {{ 6, 0, 0, 65536 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_add(d1, d2, &res);
fail_unless(res.bits[0] == -2 && res.bits[1] == -1 && res.bits[2] == -1 && res.bits[3] == -2147483648);

#test test_add_06_complex_03
s21_decimal d1 = {{ 2147483646, 2147483647, 2147483647, 0 }};
s21_decimal d2 = {{ 6, 0, 0, 65536 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_add(d1, d2, &res);
fail_unless(res.bits[0] == 2147483647 && res.bits[1] == 2147483647 && res.bits[2] == 2147483647 && res.bits[3] == 0);

#test test_add_07_complex_04
s21_decimal d1 = {{ -1, -1, -1, 98304 }};
s21_decimal d2 = {{ 12, 0, 0, 65536 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_add(d1, d2, &res);
fail_unless(res.bits[0] == -1717986917 && res.bits[1] == -1717986919 && res.bits[2] == 429496729 && res.bits[3] == 0);

#test test_add_08
s21_decimal d1 = {{ 1, 0, 0, 98304 }};
s21_decimal d2 = {{ 12, 0, 0, 65536 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_setSign(&d1, 1);
s21_setSign(&d2, 1);
fail_unless(!s21_add(d1, d2, &res));

/////////////////////////////////////////////////////////////////////////////
// s21_sub
/////////////////////////////////////////////////////////////////////////////
#tcase sub
#test test_sub_01_zero
s21_decimal d1 = {{ 1, 0, 0, 0 }};
s21_decimal d2 = {{ 1, 0, 0, 0 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_sub(d1, d2, &res);
fail_unless(res.bits[0] == 0);

#test test_sub_02_ezInt
s21_decimal d1 = {{ 2, 0, 0, 0 }};
s21_decimal d2 = {{ 1, 0, 0, 0 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_sub(d1, d2, &res);
fail_unless(res.bits[0] == 1);

#test test_sub_03_ezNegInt
s21_decimal d1 = {{ 1, 0, 0, 0 }};
s21_decimal d2 = {{ 2, 0, 0, 0 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_sub(d1, d2, &res);
fail_unless(res.bits[0] == 1 && res.bits[3] == -2147483648);

#test test_sub_04_both_minus
s21_decimal d1 = {{ 1, 0, 0, -2147483648 }};
s21_decimal d2 = {{ 2, 0, 0, -2147483648 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_sub(d1, d2, &res);
fail_unless(res.bits[0] == 1);

#test test_sub_05_first_minus
s21_decimal d1 = {{ 1, 0, 0, -2147483648 }};
s21_decimal d2 = {{ 2, 0, 0, 0 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_sub(d1, d2, &res);
fail_unless(res.bits[0] == 3 && res.bits[3] == -2147483648);

#test test_sub_06_second_minus
s21_decimal d1 = {{ 1, 0, 0, 0 }};
s21_decimal d2 = {{ 2, 0, 0, -2147483648 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_sub(d1, d2, &res);
fail_unless(res.bits[0] == 3);

#test test_sub_07_cyntheac
s21_decimal d1 = {{ 50, 0, 0, 0 }};
s21_decimal d2 = {{ 45, 0, 0, 0 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_sub(d1, d2, &res);
fail_unless(res.bits[0] == 5);

#test test_sub_08_cyntheac
s21_decimal d1 = {{ 45, 0, 0, 0 }};
s21_decimal d2 = {{ 450, 0, 0, 0 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_sub(d1, d2, &res);
fail_unless(res.bits[0] == 405);

/////////////////////////////////////////////////////////////////////////////
// s21_mul
/////////////////////////////////////////////////////////////////////////////
#tcase mul
#test test_mul_01_zero
s21_decimal d1 = {{ 1, 0, 0, 0 }};
s21_decimal d2 = {{ 0, 0, 0, 0 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_mul(d1, d2, &res);
fail_unless(res.bits[0] == 0);

#test test_mul_02_ezInt
s21_decimal d1 = {{ 2, 0, 0, 0 }};
s21_decimal d2 = {{ 3, 0, 0, 0 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_mul(d1, d2, &res);
fail_unless(res.bits[0] == 6);

#test test_mul_03_ezNegInt
s21_decimal d1 = {{ 2, 0, 0, -2147483648 }};
s21_decimal d2 = {{ 3, 0, 0, 0 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_mul(d1, d2, &res);
fail_unless(res.bits[0] == 6 && res.bits[3] == -2147483648);

#test test_mul_04_complex_01
s21_decimal d1 = {{ -1, -1, -1, 98304 }};
s21_decimal d2 = {{ 2, 0, 0, 65536 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_mul(d1, d2, &res);
fail_unless(res.bits[0] == 858993460 && res.bits[1] == 858993459 && res.bits[2] == 858993459 && res.bits[3] == 65536);

#test test_mul_05_complex_02
s21_decimal d1 = {{ 2, 0, 0, 65536 }};
s21_decimal d2 = {{ -1, -1, -1, 98304 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_mul(d1, d2, &res);
fail_unless(res.bits[0] == 858993460 && res.bits[1] == 858993459 && res.bits[2] == 858993459 && res.bits[3] == 65536);

#test test_mul_06_complex_03
s21_decimal d1 = {{ 2, 0, 0, 0 }};
s21_decimal d2 = {{ -1, -1, -1, 98304 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_mul(d1, d2, &res);
fail_unless(res.bits[0] == 858993460 && res.bits[1] == 858993459 && res.bits[2] == 858993459 && res.bits[3] == 0);

#test test_mul_07
s21_decimal d1 = {{ 4, 0, 0, 0 }};
s21_decimal d2 = {{ 2, 0, 0, 0}};
s21_setExp(&d1, 14);
s21_setExp(&d2, 15);
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_mul(d1, d2, &res);
fail_unless(res.bits[0] == 0 && res.bits[1] == 0 && res.bits[2] == 0 && res.bits[3] == 0);

/////////////////////////////////////////////////////////////////////////////
// s21_div
/////////////////////////////////////////////////////////////////////////////
#tcase div
#test test_div_01_zero
s21_decimal d1 = {{ 1, 0, 0, 0 }};
s21_decimal d2 = {{ 0, 0, 0, 0 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
fail_unless(s21_div(d1, d2, &res) == 3);

#test test_div_02_ezInt
s21_decimal d1 = {{ 6, 0, 0, 0 }};
s21_decimal d2 = {{ 3, 0, 0, 0 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_div(d1, d2, &res);
fail_unless(res.bits[0] == 2);

#test test_div_03_ezNegInt
s21_decimal d1 = {{ 12, 0, 0, -2147483648 }};
s21_decimal d2 = {{ 3, 0, 0, 0 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_div(d1, d2, &res);
fail_unless(res.bits[0] == 4 && res.bits[3] == -2147483648);

#test test_div_04_complex_01
s21_decimal d1 = {{ 12, 0, 0, -2147483648 }};
s21_decimal d2 = {{ 3, 0, 0, 0 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_div(d1, d2, &res);
fail_unless(res.bits[0] == 4 && res.bits[3] == -2147483648);

#test test_div_05
s21_decimal d1 = {{ 15, 0, 0, 1835008 }};
s21_decimal d2 = {{ 3, 0, 0, 65536 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
int result = s21_div(d1, d2, &res);
fail_unless(result == 0);

#test test_div_06
s21_decimal d1 = {{ 15, 0, 0, 0 }};
s21_decimal d2 = {{ 3, 0, 0, 0 }};
s21_setExp(&d1, 1);
s21_setExp(&d2, 2);
s21_decimal res = {{ 0, 0, 0, 0 }};
int result = s21_div(d1, d2, &res);
fail_unless(result == 0);

/////////////////////////////////////////////////////////////////////////////
// s21_mod
/////////////////////////////////////////////////////////////////////////////
#tcase mod
#test test_mod_01_zero
s21_decimal d1 = {{ 0, 0, 0, 0 }};
s21_decimal d2 = {{ 1, 0, 0, 0 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
fail_unless(s21_mod(d1, d2, &res) == 0);

#test test_mod_02_ezInt
s21_decimal d1 = {{ 6, 0, 0, 0 }};
s21_decimal d2 = {{ 3, 0, 0, 0 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_mod(d1, d2, &res);
fail_unless(res.bits[0] == 0);

#test test_mod_03_ezNegInt
s21_decimal d1 = {{ 12, 0, 0, -2147483648 }};
s21_decimal d2 = {{ 11, 0, 0, 0 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_mod(d1, d2, &res);
fail_unless(res.bits[0] == 1 && res.bits[3] == -2147483648);

#test test_mod_04_div_zero
s21_decimal d1 = {{ 1, 0, 0, 0 }};
s21_decimal d2 = {{ 0, 0, 0, 0 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
fail_unless(s21_mod(d1, d2, &res) == 3);

/////////////////////////////////////////////////////////////////////////////
// s21_is_equal
/////////////////////////////////////////////////////////////////////////////
#tcase is_equal
#test test_01_is_equal
s21_decimal d1 = {{ 450, 0, 0, 65536 }};
s21_decimal d2 = {{ 45, 0, 0, 0 }};
fail_unless(s21_is_equal(d1, d2));

#test test_02_is_equal
s21_decimal d1 = {{ 450, 0, 0, 0 }};
s21_decimal d2 = {{ 45, 0, 0, 0 }};
fail_unless(!s21_is_equal(d1, d2));

/////////////////////////////////////////////////////////////////////////////
// s21_is_not_equal
/////////////////////////////////////////////////////////////////////////////
#tcase is_not_equal
#test test_01_is_not_equal
s21_decimal d1 = {{ 45, 0, 0, 0 }};
s21_decimal d2 = {{ 45, 0, 0, 0 }};
fail_unless(!s21_is_not_equal(d1, d2));

#test test_02_is_not_equal
s21_decimal d1 = {{ 450, 0, 0, 0 }};
s21_decimal d2 = {{ 45, 0, 0, 0 }};
fail_unless(s21_is_not_equal(d1, d2));

/////////////////////////////////////////////////////////////////////////////
// s21_is_less
/////////////////////////////////////////////////////////////////////////////
#tcase is_less
#test test_01_is_less
s21_decimal d1 = {{ 50, 0, 0, 0 }};
s21_decimal d2 = {{ 45, 0, 0, 0 }};
fail_unless(!s21_is_less(d1, d2));

#test test_02_is_less
s21_decimal d1 = {{ 45, 0, 0, 0 }};
s21_decimal d2 = {{ 450, 0, 0, 0 }};
fail_unless(s21_is_less(d1, d2));

#test test_03_is_less
s21_decimal d1 = {{ 0, 0, 0, 0 }};
s21_decimal d2 = {{ 0, 0, 0, 0 }};
fail_unless(!s21_is_less(d1, d2));

#test test_04_is_less
s21_decimal d1 = {{ 45, 0, 0, 0 }};
s21_decimal d2 = {{ 45, 0, 0, -2147483648 }};
fail_unless(!s21_is_less(d1, d2));

#test test_05_is_less
s21_decimal d1 = {{ 45, 0, 0, -2147483648 }};
s21_decimal d2 = {{ 50, 0, 0, -2147483648 }};
fail_unless(!s21_is_less(d1, d2));

/////////////////////////////////////////////////////////////////////////////
// s21_is_less_or_equal
/////////////////////////////////////////////////////////////////////////////
#tcase is_less_or_equal
#test test_01_is_less_or_equal
s21_decimal d1 = {{ 50, 0, 0, 0 }};
s21_decimal d2 = {{ 50, 0, 0, 0 }};
fail_unless(s21_is_less_or_equal(d1, d2));

#test test_02_less_or_equal
s21_decimal d1 = {{ 45, 0, 0, 0 }};
s21_decimal d2 = {{ 450, 0, 0, 0 }};
fail_unless(s21_is_less_or_equal(d1, d2));

#test test_03_less_or_equal
s21_decimal d1 = {{ 4500, 0, 0, 0 }};
s21_decimal d2 = {{ 450, 0, 0, 0 }};
fail_unless(!s21_is_less_or_equal(d1, d2));

/////////////////////////////////////////////////////////////////////////////
// s21_is_greater
/////////////////////////////////////////////////////////////////////////////
#tcase is_greater
#test test_01_is_greater
s21_decimal d1 = {{ 50, 0, 0, 0 }};
s21_decimal d2 = {{ 45, 0, 0, 0 }};
fail_unless(s21_is_greater(d1, d2));

#test test_02_is_greater
s21_decimal d1 = {{ 45, 0, 0, 0 }};
s21_decimal d2 = {{ 450, 0, 0, 0 }};
fail_unless(!s21_is_greater(d1, d2));

/////////////////////////////////////////////////////////////////////////////
// s21_is_greater_or_equal
/////////////////////////////////////////////////////////////////////////////
#tcase is_greater_or_equal
#test test_01_is_greater_or_equal
s21_decimal d1 = {{ 50, 0, 0, 0 }};
s21_decimal d2 = {{ 500, 0, 0, 65536 }};
fail_unless(s21_is_greater_or_equal(d1, d2));

#test test_02_is_greater_or_equal
s21_decimal d1 = {{ 450, 0, 0, 0 }};
s21_decimal d2 = {{ 450, 0, 0, 65536 }};
fail_unless(s21_is_greater_or_equal(d1, d2));

#test test_03_is_greater_or_equal
s21_decimal d1 = {{ 450, 0, 0, 0 }};
s21_decimal d2 = {{ 45000, 0, 0, 65536 }};
fail_unless(!s21_is_greater_or_equal(d1, d2));

/////////////////////////////////////////////////////////////////////////////
// s21_negate
/////////////////////////////////////////////////////////////////////////////
#tcase negate
#test test_01_negate
s21_decimal d1 = {{ 45, 0, 0, 0 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_negate(d1, &res);
fail_unless(s21_getSign(res) == 1);

#test test_02_negate
s21_decimal d1 = {{ 45, 0, 0, -2147483648 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_negate(d1, &res);
fail_unless(s21_getSign(res) == 0);

/////////////////////////////////////////////////////////////////////////////
// s21_round
/////////////////////////////////////////////////////////////////////////////
#tcase round
#test test_01_round
s21_decimal d1 = {{ 4555, 0, 0, 65536 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_round(d1, &res);
fail_unless(res.bits[0] == 456);

#test test_02_round
s21_decimal d1 = {{ 4543, 0, 0, 65536 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_round(d1, &res);
fail_unless(res.bits[0] == 454);

/////////////////////////////////////////////////////////////////////////////
// s21_floor
/////////////////////////////////////////////////////////////////////////////
#tcase floor
#test test_01_floor
s21_decimal d1 = {{ 4558, 0, 0, 65536 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_floor(d1, &res);
fail_unless(res.bits[0] == 455);

#test test_02_floor
s21_decimal d1 = {{ 4549, 0, 0, 65536 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_setSign(&d1, NEGATIVE);
s21_floor(d1, &res);
fail_unless(res.bits[0] == 455);

/////////////////////////////////////////////////////////////////////////////
// s21_truncate
/////////////////////////////////////////////////////////////////////////////
#tcase truncate
#test test_01_truncate
s21_decimal d1 = {{ 4549, 0, 0, 65536 }};
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_truncate(d1, &res);
fail_unless(res.bits[0] == 454);

/////////////////////////////////////////////////////////////////////////////
// s21_from_int_to_decimal
/////////////////////////////////////////////////////////////////////////////
#tcase from_int_to_decimal
#test test_01_from_int_to_decimal
int intSign123 = -123;
s21_decimal res = {{ 0, 0, 0, 0 }};
s21_from_int_to_decimal(intSign123, &res);
fail_unless(res.bits[0] == 123);
fail_unless(res.bits[3] == -2147483648);

#test test_02_from_int_to_decimal
int intSign123 = -123;
s21_decimal *res;
res = NULL;
s21_from_int_to_decimal(intSign123, res);
fail_unless(s21_from_int_to_decimal(intSign123, res));

/////////////////////////////////////////////////////////////////////////////
// s21_from_decimal_to_int
/////////////////////////////////////////////////////////////////////////////
#tcase from_decimal_to_int
#test test_01_from_decimal_to_int
int intSign123;
s21_decimal src = {{ 123, 0, 0, 0 }};
s21_setSign(&src, NEGATIVE);
s21_from_decimal_to_int(src, &intSign123);
fail_unless(intSign123 == -123);

#test test_02_from_decimal_to_int
int *intSign123;
intSign123 = NULL;
s21_decimal src = {{ 123, 0, 0, -2147483648 }};
fail_unless(s21_from_decimal_to_int(src, intSign123));

#test test_03_from_decimal_to_int
int intSign123;
s21_decimal src = {{ 123, 0, 0, 1900544 }};
fail_unless(s21_from_decimal_to_int(src, &intSign123));

/////////////////////////////////////////////////////////////////////////////
// s21_from_decimal_to_float
/////////////////////////////////////////////////////////////////////////////
#tcase from_decimal_to_float
#test test_01_from_decimal_to_float
s21_decimal d1 = {{132, 0, 0, 0}};
s21_setExp(&d1, 1);
float dst;
s21_from_decimal_to_float(d1, &dst);
// printf("%f  ==  13.200000\n", dst);
float res = 13.200000;
fail_unless(dst == res);

#test test_02_from_decimal_to_float
s21_decimal d1 = {{132, 0, 0, 0}};
s21_setExp(&d1, 1);
s21_setSign(&d1, 1);
float dst;
s21_from_decimal_to_float(d1, &dst);
float res = -13.200000;
fail_unless(dst == res);

#test test_03_from_decimal_to_float
s21_decimal d1 = {{132, 0, 0, 0}};
s21_setExp(&d1, 29);
float dst;
fail_unless(s21_from_decimal_to_float(d1, &dst));

#test test_04_from_decimal_to_float
s21_decimal d1 = {{132, 0, 0, 0}};
s21_setExp(&d1, 1);
float *dst;
dst = NULL;
fail_unless(s21_from_decimal_to_float(d1, dst));

/////////////////////////////////////////////////////////////////////////////
// s21_from_float_to_decimal
/////////////////////////////////////////////////////////////////////////////
#tcase from_float_to_decimal
#test test_01_from_float_to_decimal_simple
s21_decimal src = {{ 0, 0, 0, 0 }};
float x = 12.132;
s21_from_float_to_decimal(x, &src);
fail_unless((unsigned int)src.bits[0] == 12132);